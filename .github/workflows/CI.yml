name: CI

on: [push]

env:
  CI: "ON"
  CMAKE_BUILD_PARALLEL_LEVEL: "2"
  CMAKE_CONFIG_TYPE: "CodeCoverage"
  CTEST_OUTPUT_ON_FAILURE: "ON"
  CTEST_PARALLEL_LEVEL: "2"
  HOMEBREW_DISPLAY_INSTALL_TIMES: "ON"
  HOMEBREW_NO_ANALYTICS: "ON"
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  NCPU: "2"
  PIP_DISABLE_PIP_VERSION_CHECK: "ON"
  PIP_NO_CLEAN: "ON"
  PIP_PREFER_BINARY: "ON"
  PIPENV_DEV: "ON"
  PIPENV_IGNORE_PIPFILE: "ON"
  PIPENV_MAX_RETRIES: "3"
  TZ: "UTC"
  ZERO_AR_DATE: "ON"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        gcc: [7, 8, 9]

    env:
      FC: gfortran-${{ matrix.gcc }}
      CC: gcc-${{ matrix.gcc }}
      GCC_V: ${{ matrix.gcc }}

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: 3.x

    - name: set env
      id: set-env
      run: |
        echo "::set-env name=BUILD_DIR::${GITHUB_WORKSPACE}/build"
        echo "::set-env name=PIPENV_CACHE_DIR::${HOME}/py-cache/pipenv-cache"
        echo "::set-env name=PIP_CACHE_DIR::${HOME}/py-cache/pip-cache"
        echo "::set-env name=PY_CACHE_DIR::${HOME}/py-cache"
        echo "::set-env name=PYTHONUSERBASE::${HOME}/py-cache/userbase"
        echo "::set-env name=SOURCE_DATE_EPOCH::$(git log -1 --pretty='%ct' $GITHUB_SHA)"
        echo "::set-env name=WORKON_HOME::${HOME}/py-cache/venvs"

    - name: set outputs
      id: set-outputs
      run: |
        echo "::add-path::${PYTHONUSERBASE}/bin"
        echo "::set-output name=build_dir::${BUILD_DIR}"
        echo "::set-output name=homedir::${HOME}"
        echo "::set-output name=pip_cache_dir::${PIP_CACHE_DIR}"
        echo "::set-output name=pipenv_cache_dir::${PIPENV_CACHE_DIR}"
        echo "::set-output name=py_cache_dir::${PY_CACHE_DIR}"
        echo "::set-output name=pythonuserbase::${PYTHONUSERBASE}"
        echo "::set-output name=workon_home::${WORKON_HOME}"
        echo "::set-output name=workspacedir::${GITHUB_WORKSPACE}"
        mkdir -p ${PIP_CACHE_DIR} ${PIPENV_CACHE_DIR} ${WORKON_HOME} ${PYTHONUSERBASE} || true
        if brew --cache ; then
          rm -rf $(brew --cache)
          echo "::set-output name=homebrew_cache::$(brew --cache)"
        fi

    - name: setup-linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-${GCC_V} g++-${GCC_V} gfortran-${GCC_V}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_V} \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
        --slave /usr/bingcov gcov /usr/bin/gcov-${GCC_V}

    - uses: actions/cache@v1
      if: contains(matrix.os, 'macos')
      with:
        path: ${{ steps.set-outputs.outputs.homebrew_cache }}
        key: ${{ runner.os }}-brew-cache-${{ matrix.gcc }}
        restore-keys: |
          ${{ runner.os }}-brew-cache-

    - name: setup-macos
      if: contains( matrix.os, 'macos')
      run: |
        mkdir -p $(brew --cache) || true
        brew install gcc@${GCC_V} || brew upgrade gcc@{GCC_V} || true

    - uses: actions/cache@v1
      with:
        path: ${{ steps.set-outputs.outputs.py_cache_dir }}
        key: ${{ runner.os }}-pycache-1-${{ hashFiles('**/Pipfile*') }}
        restore-keys: |
          ${{ runner.os }}-pycache-1

    - name: setup-common
      run: |
        pipenv --help || pip install --user pipenv
        pipenv sync --dev
        curl -s https://codecov.io/bash > "${GITHUB_WORKSPACE}/codecov"
        chmod +x "${GITHUB_WORKSPACE}/codecov"

    - name: configure
      run: |
        set -euo pipefail
        pipenv graph
        ${CC} --version && ${FC} --version && pipenv run cmake --version
        if pipenv run configure ; then
          true
        else
          pipenv run gather_logs
          false
        fi

    - name: upload cmake
      uses: actions/upload-artifact@v1
      with:
        name: configure_logs
        path: ./logs
      if: failure()

    - name: compile
      run: pipenv run build || pipenv run verbose_build

    - name: unit test
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        pipenv run unit_test
        "${GITHUB_WORKSPACE}/codecov" -v \
          -x gcov-${GCC_V} -p ${GITHUB_WORKSPACE} \
          -c -F unittest_extern \
          -G 'extern/**/*.*' \
          -g 'generated/**/*.*' \
          -g 'src/**/*.*' \
          -n "GHA-GCC${GCC_V}-${{ runner.os }}"
        find "${BUILD_DIR}/extern" -type f -name '*.gc*' -exec rm {} \;
        "${GITHUB_WORKSPACE}/codecov" -v \
          -x gcov-${GCC_V} -p ${GITHUB_WORKSPACE} \
          -c -F unittest_tests \
          -G 'extern/GNU/**/*_test.*' \
          -G 'src/**/*_test.*' \
          -g 'extern/**/*.*' \
          -n "GHA-GCC${GCC_V}-${{ runner.os }}"
        find "${BUILD_DIR} -type f -name '*_test.gc*' -exec rm {} \;
        "${GITHUB_WORKSPACE}/codecov" -v \
          -x gcov-${GCC_V} -p ${GITHUB_WORKSPACE} \
          -c -F unittest_core \
          -G 'generated/GNU/*.[Ff]90' \
          -G 'src/c_interfaces/*.c' \
          -g '**/*_test.*' \
          -g 'extern/**/*.*' \
          -n "GHA-GCC${GCC_V}-${{ runner.os }}"
        find "${BUILD_DIR}" -type f -name '*.gc*' -exec rm {} \;

    - name: integration test
      run: |
        pipenv run integration_test
        # for flag in core extern tests ; do
        #   bash <(curl -s https://codecov.io/bash) \
        #     -x gcov-${GCC_V} -p ${GITHUB_WORKSPACE} \
        #     -c -F integrationtest_${flag} \
        #     -X fix \
        #     -n "GHA-GCC${GCC_V}-${{ runner.os }}"
        # done
